#!/bin/bash
#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

create_database() {
    read -p "Enter database name: " db_name
    if [[ -z "$db_name" ]]; then
        echo "Database name cannot be empty."
        main_menu
        return
    fi

    if [ ! -d "databases" ]; then 
        mkdir databases
    fi

    if [ -d "./databases/$db_name" ]; then
        echo "Database already exists."
    else
        mkdir "./databases/$db_name"
        echo "Database '$db_name' created."
    fi
    main_menu
}

list_databases() {
    echo "Databases:"
    if [ -d "./databases" ]; then
        ls -d ./databases/*/
    else
        echo "No databases found. The 'databases' directory does not exist."
    fi
    main_menu
}

drop_database() {
    read -p "Enter database name to drop: " db_name
    if [[ -z "$db_name" ]]; then
        echo "Database name cannot be empty."
        main_menu
        return
    fi

    if [ -d "./databases/$db_name" ]; then
        rm -r "./databases/$db_name"
        echo "Database '$db_name' dropped."
    else
        echo "Database does not exist."
    fi
    main_menu
}

connect_database() {
    read -p "Enter database name to connect: " db_name
    if [[ -z "$db_name" ]]; then
        echo "Database name cannot be empty."
        main_menu
        return
    fi

    if [ -d "./databases/$db_name" ]; then
        cd "./databases/$db_name"
        echo "Connected to database '$db_name'."
        db_menu
    else
        echo "Database does not exist."
        main_menu
    fi
}

main_menu() {
    echo "Main Menu:"
    select choice in "Create Database" "List Databases" "Connect To Database" "Drop Database" "Exit"
    do
        case $choice in
            "Create Database")
                create_database
                ;;
            "List Databases")
                list_databases
                ;;
            "Connect To Database")
                connect_database
                ;;
            "Drop Database")
                drop_database
                ;;
            "Exit")
                exit 0
                ;;
            *) echo "Invalid option. Please select a valid menu item." ;;
        esac
    done
}

db_menu() {
    echo "Database Menu:"
    echo "1. Create Table"
    echo "2. List Tables"
    echo "3. Drop Table"
    echo "4. Insert into Table"
    echo "5. Select From Table"
    echo "6. Delete From Table"
    echo "7. Update Table"
    echo "8. Back to Main Menu"
    read -p "Choose an option: " choice
    case $choice in
        1) create_table ;;
        2) list_tables ;;
        3) drop_table ;;
        4) insert_into_table ;;
        5) select_from_table ;;
        6) delete_from_table ;;
        7) update_table ;;
        8) cd ..; main_menu ;;
        *) echo "Invalid option. Please choose a valid action." ;;
    esac
}

create_table() {
    read -p "Enter table name: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        echo "Table already exists."
    else
        read -p "Enter number of columns: " num_columns
        if ! [[ "$num_columns" =~ ^[0-9]+$ ]] || [ "$num_columns" -le 0 ]; then
            echo "Invalid number of columns. Please enter a positive integer."
            db_menu
            return
        fi

        columns=""
        for ((i = 1; i <= num_columns; i++)); do
            while true; do
                read -p "Enter column $i name and type (e.g., 'name string' or 'age integer'): " column
                if [[ ! "$column" =~ ^[a-zA-Z_][a-zA-Z0-9_]*\ (string|integer)$ ]]; then
                    echo "Invalid column definition. Use the format 'name type', where type is 'string' or 'integer'."
                else
                    columns+="$column,"
                    break
                fi
            done
        done

        columns=${columns%,}  # Remove trailing comma
        echo "$columns" > "$table_name"
        echo "Table '$table_name' created with columns: $columns"
    fi
    db_menu
}

insert_into_table() {
    read -p "Enter table name: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        columns=$(head -n 1 "$table_name")
        echo "Columns: $columns"

        IFS=',' read -r -a columns_array <<< "$columns"
        values=""
        for column in "${columns_array[@]}"; do
            col_type=$(echo "$column" | awk '{print $2}')
            while true; do
                read -p "Enter value for column $(echo "$column" | awk '{print $1}'): " value
                if [[ "$col_type" == "integer" && ! "$value" =~ ^[0-9]+$ ]]; then
                    echo "Invalid value for integer column. Please enter a valid integer."
                elif [[ "$col_type" == "string" && -z "$value" ]]; then
                    echo "Invalid value for string column. Please enter a non-empty string."
                else
                    values+="$value,"
                    break
                fi
            done
        done

        values=${values%,}  # Remove trailing comma
        echo "$values" >> "$table_name"
        echo "Values inserted into table '$table_name'."
    else
        echo "Table does not exist."
    fi
    db_menu
}

list_tables() {
    echo "Tables:"
    ls -p | grep -v /
    db_menu
}

drop_table() {
    read -p "Enter table name to drop: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        rm "$table_name"
        echo "Table '$table_name' dropped."
    else
        echo "Table does not exist."
    fi
    db_menu
}

select_from_table() {
    read -p "Enter table name: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        cat "$table_name"
    else
        echo "Table does not exist."
    fi
    db_menu
}

delete_from_table() {
    read -p "Enter table name: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        read -p "Enter row number to delete: " row_num
        if ! [[ "$row_num" =~ ^[0-9]+$ ]] || [ "$row_num" -le 0 ]; then
            echo "Invalid row number. Please enter a positive integer."
            db_menu
            return
        fi
        sed -i "${row_num}d" "$table_name"
        echo "Row $row_num deleted from table '$table_name'."
    else
        echo "Table does not exist."
    fi
    db_menu
}

update_table() {
    read -p "Enter table name: " table_name
    if [[ -z "$table_name" ]]; then
        echo "Table name cannot be empty."
        db_menu
        return
    fi

    if [ -f "$table_name" ]; then
        read -p "Enter row number to update: " row_num
        if ! [[ "$row_num" =~ ^[0-9]+$ ]] || [ "$row_num" -le 0 ]; then
            echo "Invalid row number. Please enter a positive integer."
            db_menu
            return
        fi

        columns=$(head -n 1 "$table_name")
        echo "Columns: $columns"

        IFS=',' read -r -a columns_array <<< "$columns"
        values=""
        for column in "${columns_array[@]}"; do
            col_type=$(echo "$column" | awk '{print $2}')
            while true; do
                read -p "Enter new value for column $(echo "$column" | awk '{print $1}'): " value
                if [[ "$col_type" == "integer" && ! "$value" =~ ^[0-9]+$ ]]; then
                    echo "Invalid value for integer column. Please enter a valid integer."
                elif [[ "$col_type" == "string" && -z "$value" ]]; then
                    echo "Invalid value for string column. Please enter a non-empty string."
                else
                    values+="$value,"
                    break
                fi
            done
        done

        values=${values%,}  # Remove trailing comma
        sed -i "${row_num}s/.*/$values/" "$table_name"
        echo "Row $row_num updated in table '$table_name'."
    else
        echo "Table does not exist."
    fi
    db_menu
}

main_menu
